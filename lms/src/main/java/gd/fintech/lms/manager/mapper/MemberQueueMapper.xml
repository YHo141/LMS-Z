<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gd.fintech.lms.manager.mapper.MemberQueueMapper">
	<!-- 학생의 승인을 위한 조인 -->
	<resultMap type="gd.fintech.lms.vo.StudentQueue" id="selectStudentQueueList">
		<result property="studentId" column="student_id"/>
		<result property="studentEmail" column="student_email"/>
		<result property="studentName" column="student_name"/>
		<result property="studentPhone" column="student_phone"/>
		<result property="studentGender" column="student_gender"/>
		<result property="studentBirth" column="student_birth"/>
		<result property="studentAddressMain" column="student_address_main"/>
		<result property="studentAddressSub" column="student_address_sub"/>
		<collection property="account" ofType="gd.fintech.lms.vo.Account">
			<result property="accountId" column="account_id"/>
			<result property="accountPw" column="account_pw"/>
			<result property="accountState" column="account_state"/>
			<result property="accountLevel" column="account_level"/>
			<result property="accountCreateDate" column="account_createdate"/>
			<result property="accountUpdateDate" column="account_updatedate"/>
		</collection>
	</resultMap>
	<!-- 강사의 승인을 위한 조인 -->
	<resultMap type="gd.fintech.lms.vo.TeacherQueue" id="selectTeacherQueueList">
		<result property="teacherId" column="teacher_id"/>
		<result property="teacherEmail" column="teacher_email"/>
		<result property="teacherName" column="teacher_name"/>
		<result property="teacherPhone" column="teacher_phone"/>
		<result property="teacherGender" column="teacher_gender"/>
		<result property="teacherBirth" column="teacher_birth"/>
		<result property="teacherAddressMain" column="teacher_address_main"/>
		<result property="teacherAddressSub" column="teacher_address_sub"/>
		<collection property="account" ofType="gd.fintech.lms.vo.Account">
			<result property="accountId" column="account_id"/>
			<result property="accountPw" column="account_pw"/>
			<result property="accountState" column="account_state"/>
			<result property="accountLevel" column="account_level"/>
			<result property="accountCreateDate" column="account_createdate"/>
			<result property="accountUpdateDate" column="account_updatedate"/>
		</collection>
	</resultMap>
	<!-- 승인 대기상태인 학생리스트를 불러오는 쿼리 -->
	<select id="selectStudentMemberQueue" resultMap="selectStudentQueueList">
		SELECT 
			s.student_id,
			s.student_email,
			s.student_name,
			s.student_phone,
			s.student_gender,
			s.student_birth,
			s.student_address_main,
			s.student_address_sub,
			a.account_level
		FROM student_queue s, account a
		WHERE s.student_id = a.account_id
		AND a.account_state = '대기'
	</select>
	<!-- 승인 대기상태인 강사리스트를 불러오는 쿼리 -->
	<select id="selectTeacherMemberQueue" resultMap="selectTeacherQueueList">
		SELECT 
			t.teacher_id,
			t.teacher_email,
			t.teacher_name,
			t.teacher_phone,
			t.teacher_gender,
			t.teacher_birth,
			t.teacher_address_main,
			t.teacher_address_sub,
			a.account_level
		FROM teacher_queue t, account a
		WHERE t.teacher_id = a.account_id
		AND a.account_state = '대기'
	</select>
	<!-- 승인할 학생의 정보를 가져오는 쿼리 -->
	<select id="selectStudentOne" parameterType="String" resultType="gd.fintech.lms.vo.StudentQueue">
		SELECT
			student_id studentId,
			student_email studentEmail,
			student_name studentName,
			student_phone studentPhone,
			student_gender studentGender,
			student_birth studentBirth,
			student_address_main studentAddressMain,
			student_address_sub studentAddressSub
		FROM student_queue
		WHERE student_id= #{studentId}
	</select>
	<!-- 승인 후 학생 리스트에 추가해주는 쿼리 -->
	<insert id="insertStudent" parameterType="java.util.Map">
		INSERT INTO student(
			student_id,
			student_email,
			student_name,
			student_phone,
			student_gender,
			student_birth,
			student_address_main,
			student_address_sub,
			student_accessdate,
			student_updatedate,
			manager_id_access
		) VALUES(
			#{s.studentId},
			#{s.studentEmail},
			#{s.studentName},
			#{s.studentPhone},
			#{s.studentGender},
			#{s.studentBirth},
			#{s.studentAddressMain},
			#{s.studentAddressSub},
			NOW(),
			NOW(),
			#{managerId}
		)
	</insert>
	<!-- 승인할 강사의 정보를 가져오는 쿼리 -->
	<select id="selectTeacherOne" parameterType="String" resultType="gd.fintech.lms.vo.TeacherQueue">
		SELECT
			teacher_id teacherId,
			teacher_email teacherEmail,
			teacher_name teacherName,
			teacher_phone teacherPhone,
			teacher_gender teacherGender,
			teacher_birth teacherBirth,
			teacher_address_main teacherAddressMain,
			teacher_address_sub teacherAddressSub
		FROM teacher_queue
		WHERE teacher_id= #{teacherId}
	</select>
	<!-- 승인 후 강사 리스트에 추가해주는 쿼리 -->
	<insert id="insertTeacher" parameterType="java.util.Map">
		INSERT INTO teacher(
			teacher_id,
			teacher_email,
			teacher_name,
			teacher_phone,
			teacher_gender,
			teacher_birth,
			teacher_address_main,
			teacher_address_sub,
			teacher_accessdate,
			teacher_updatedate,
			manager_id_access
		) VALUES(
			#{t.teacherId},
			#{t.teacherEmail},
			#{t.teacherName},
			#{t.teacherPhone},
			#{t.teacherGender},
			#{t.teacherBirth},
			#{t.teacherAddressMain},
			#{t.teacherAddressSub},
			NOW(),
			NOW(),
			#{managerId}
		)
	</insert>
	<!-- 승인을 거부한 학생을 대기상태에서 삭제하는 쿼리 -->
	<delete id="deleteStudentQueue" parameterType="String">
		DELETE FROM student_queue
		WHERE student_id = #{studentId}
	</delete>
	<!-- 승인을 거부한 강사를 대기상태에서 삭제하는 쿼리 -->
	<delete id="deleteTeacherQueue" parameterType="String">
		DELETE FROM teacher_queue
		WHERE teacher_id = #{teacherId}
	</delete>
	<!-- 승인상태에 따라 강사와 학생의 상태변경을 위한 쿼리 -->
	<update id="updateAccountState" parameterType="java.util.Map">
		UPDATE account
		SET account_state = #{accountState},
			account_updatedate=NOW()
		WHERE account_id = #{memberId}
	</update>
</mapper>