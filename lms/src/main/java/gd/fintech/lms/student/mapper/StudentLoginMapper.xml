<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gd.fintech.lms.student.mapper.StudentLoginMapper">
	<!-- 해당 아이디의 pw를 랜덤한 13글자로 변경 -->
	<update id="updateAccountToPw" parameterType="java.util.Map">
		UPDATE account
		SET account_pw = PASSWORD(#{accountPw})
		WHERE account_id = #{accountId}
	</update>

	<!-- 이름과 이메일을 이용해서 해당 정보 체크 -->
	<select id="selectStudentToNameAndEmailByCheck" parameterType="gd.fintech.lms.vo.Student" resultType="int">
		SELECT COUNT(*)
		FROM student
		WHERE student_name = #{studentName} and student_email = #{studentEmail}
	</select>
	
	<!-- 이름과 이메일을 이용해서 해당 정보 찾기 -->
	<select id="selectStudentToNameAndEmail" parameterType="gd.fintech.lms.vo.Student" resultType="gd.fintech.lms.vo.Student">
		SELECT s.student_id studentId, s.student_name studentName, s.student_email studentEmail
		FROM student s INNER JOIN account a
		ON a.account_id = s.student_id
		WHERE s.student_name = #{studentName} and s.student_email = #{studentEmail}
	</select>
	
	<!-- 로그인 중복 방지 -->
	<select id="selectConnectByOverlapLogin" parameterType="gd.fintech.lms.vo.Connect" resultType="int">
		SELECT COUNT(*)
		FROM connect
		WHERE account_id = #{accountId} and connect_state = #{connectState}
	</select>
	<!-- 로그인 시 이미지 정보 가져오기 -->
	<select id="selectStudentImage" parameterType="String" resultType="String">
		SELECT student_image
		FROM student
		WHERE student_id = #{studentId}
	</select>
	
	<!-- 도로명을 입력 하였을 경우 주소 리스트 출력 -->
	<select id="selectAddressToSearch" parameterType="java.util.Map" resultType="gd.fintech.lms.vo.Address">
		SELECT
			sido,
			sigungu,
			doro,
			buildno1,
			buildno2,
			id
		FROM address
		WHERE doro like CONCAT(#{doro}, '%')
		ORDER BY doro, buildno1, buildno2
		<!-- LIMIT #{currentPage}, #{limitPage}-->
	</select>
	
	<!-- 아이디 중복검사 -->
	<select id="selectAccountToSignupByOverlapId" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM account
		WHERE account_id = #{accountId}
	</select>
	
	<!-- 이메일 중복검사 -->
	<select id="selectStudentToSignupByOverLapEmail" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM student_queue
		WHERE student_email = #{studentEmail}
	</select>
	
	<!-- 로그인 액션 -->
	<select id="selectAccountToStudentLogin" parameterType="gd.fintech.lms.vo.Account" resultType="String">
  		SELECT account_id accountId
		FROM account
		WHERE
			account_id = #{accountId} and 
			account_pw = PASSWORD(#{accountPw}) and
			account_state = #{accountState} and
			account_level = #{accountLevel} 
	</select>
	
	<!-- 회원가입 account 테이블 추가 -->
	<insert id="insertAccountToSignup" parameterType="gd.fintech.lms.vo.StudentForm">
		INSERT INTO account(account_id, account_pw,
							account_state, account_level,
							account_createdate, account_updatedate)
		VALUES(#{studentId}, PASSWORD(#{studentPw}),
			   #{accountState}, #{accountLevel},
			   NOW(), NOW())
	</insert>
	
	<!-- 회원가입 student_queue 테이블 추가 -->
	<insert id="insertstudentQueueToSignup" parameterType="gd.fintech.lms.vo.StudentForm">
		INSERT INTO student_queue(student_id, student_email,
								  student_phone, student_name,
								  student_gender, student_birth,
								  student_address_main, student_address_sub)
		VALUES(#{studentId}, #{studentEmail},
			   #{studentPhone}, #{studentName},
			   #{studentGender}, #{studentBirth},
			   #{studentAddressMain}, #{studentAddressSub})
	</insert>
	
	<!-- 휴면상태일 경우 휴면해제 인증 폼으로 이동하기 위한 조건 -->
	<select id="selectAccountStateCk" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT 
			account_state accountState
		FROM `account`
		WHERE account_id=#{accountId}
	</select>
	<!-- 인증메일을 보낼 학생 메일 가져오기 -->
	<select id="selectStudentEmail" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT
			student_email studentEmail
		FROM student
		WHERE student_id=#{studentId}
	</select>
	<!-- 휴면계정 인증 성공시 업데이트 -->
	<update id="updateChangeActivity" parameterType="java.lang.String">
		UPDATE `account`
		SET account_state ='활성화'
		WHERE account_id=#{studentId}
	</update>
</mapper>