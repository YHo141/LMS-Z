<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
  <mapper namespace="gd.fintech.lms.student.mapper.StudentQuestionMapper">
  	
  	<resultMap type="gd.fintech.lms.vo.Question" id="selectQuestionListPage">
	 	<result property="questionNo" column="question_no"/>
	 	<result property="lectureNo" column="lecture_no"/>
	 	<result property="accountId" column="account_id"/>
	 	<result property="questionWriter" column="question_writer"/>
	 	<result property="questionTitle" column="question_title"/>
	 	<result property="questionContent" column="question_content"/>
	 	<result property="questionCount" column="question_count"/>
	 	<result property="questionCreatedate" column="question_createdate"/>
	 	<result property="questionUpdatedate" column="question_updatedate"/>
	 	<result property="questionPassword" column="question_password"/>
	 	
	 <collection property="lecture" ofType="gd.fintech.lms.vo.Lecture">
 		<result property="lectureNo" column="lecture_no"/>
 		<result property="lectureName" column="lecture_name"/>
 	</collection>
 	
 	<collection property="classRegistrationList" ofType="gd.fintech.lms.vo.ClassRegistration">
			<result property="lectureNo" column="lecture_no"/>
			<result property="accountId" column="account_id"/>
			<result property="classRegistrationState" column="class_registration_state"/>
		</collection>
	 </resultMap>	
  	
  	<!-- 질문목록 리스트 페이징 -->
  	<select id="selectQuestionListPage" resultMap="selectQuestionListPage" parameterType="java.util.Map">
	  	SELECT 
	  		q.question_no,
	  		q.lecture_no,
	  		l.lecture_name,
	  		q.question_writer,
	  		q.question_title,
	  		q.question_count,
	  		q.question_password,
	  		DATE_FORMAT(q.question_createdate,'%Y-%m-%d') question_createdate
	  	FROM question q left join lecture l 
	  		 on q.lecture_no = l.lecture_no
	  		 left join class_registration cr
	  		 on q.lecture_no = cr.lecture_no
	  	WHERE cr.account_id = #{accountId} AND cr.class_registration_state = '수강중'	 
	  	ORDER BY question_createdate DESC
	  	LIMIT #{beginRow},#{rowPerPage}
  	</select>
  	
  	
  	<select id="selectQuestionTitleSearch" resultMap="selectQuestionListPage" parameterType="java.util.Map">
  		SELECT 
  			q.question_no,
  			q.lecture_no,
  			l.lecture_name,
  			q.question_writer,
  			q.question_title,
  			q.question_count,
  			DATE_FORMAT(q.question_createdate,'%Y-%m-%d') question_createdate
  		FROM question q left join lecture l 
	  		 on q.lecture_no = l.lecture_no
	  		 left join class_registration cr
	  		 on q.lecture_no = cr.lecture_no
  		WHERE q.question_title LIKE CONCAT('%',#{questionTitle},'%') AND cr.account_id = #{accountId}
  		LIMIT #{beginRow},#{rowPerPage}
  	</select>
  	
  	<select id="selectQuestionWriterSearch" resultMap="selectQuestionListPage" parameterType="java.util.Map">
  		SELECT 
  			q.question_no,
  			q.lecture_no,
  			l.lecture_name,
  			q.question_writer,
  			q.question_title,
  			q.question_count,
  			DATE_FORMAT(q.question_createdate,'%Y-%m-%d') question_createdate
  		FROM question q left join lecture l 
	  		 on q.lecture_no = l.lecture_no
	  		 left join class_registration cr
	  		 on q.lecture_no = cr.lecture_no
  		WHERE question_writer LIKE CONCAT('%',#{questionWriter},'%') AND cr.account_id = #{accountId}
  		LIMIT #{beginRow},#{rowPerPage}
  	</select>
  	
  	
  	<select id="totalCountQuestionSearchTitle" resultType="int" parameterType="String">
  		SELECT 
  			count(*) count
  		FROM question q left join class_registration cr
	  		 on q.lecture_no = cr.lecture_no
  		WHERE question_title LIKE CONCAT('%',#{questionTitle},'%') AND cr.account_id = #{accountId} AND cr.class_registration_state = '수강중'
  	</select>
  	
  	<select id="totalCountQuestionSearchWriter" resultType="int" parameterType="String">
  		SELECT 
  			count(*) count
  		FROM question q left join class_registration cr
	  		 on q.lecture_no = cr.lecture_no
  		WHERE question_writer LIKE CONCAT('%',#{questionWriter},'%') AND cr.account_id = #{accountId} AND cr.class_registration_state = '수강중'
  	</select>
  	
  	<!-- 질문목록 리스트 총 행의 갯수 -->
  	<select id="totalCountQuestion" resultType="int" parameterType="String">
  		SELECT 
  			count(*) count
  		FROM question q left join class_registration cr
	  		 on q.lecture_no = cr.lecture_no
	  	WHERE cr.account_id = #{accountId} AND cr.class_registration_state = '수강중'	 
  	</select>
  	
  	<select id="totalCountQuestionComment" resultType="int" parameterType="int">
  		SELECT 
  			count(*) count
  		FROM question_comment
	  	WHERE question_no = #{questionNo}
  	</select>
  	
  	<resultMap type="gd.fintech.lms.vo.Question" id="selectQuestionOne">
	 	<result property="questionNo" column="question_no"/>
	 	<result property="lectureNo" column="lecture_no"/>
	 	<result property="accountId" column="account_id"/>
	 	<result property="questionWriter" column="question_writer"/>
	 	<result property="questionTitle" column="question_title"/>
	 	<result property="questionContent" column="question_content"/>
	 	<result property="questionCreatedate" column="question_createdate"/>
	 	<result property="questionUpdatedate" column="question_updatedate"/>
	 	<result property="questionPassword" column="question_password"/>
 	
 	<collection property="questionfile" ofType="gd.fintech.lms.vo.QuestionFile">
 		<result property="questionFileUuid" column="question_file_uuid"/>
 		<result property="questionFileOriginal" column="question_file_original"/>
 		<result property="questionNo" column="question_no"/>
 		<result property="questionFileSize" column="question_file_size"/>
 		<result property="questionFileType" column="question_file_type"/>
 		<result property="questionFileCount" column="question_file_count"/>
 		<result property="questionFileCreatedate" column="question_file_createdate"/>
 	</collection>
 	
 	<collection property="lecture" ofType="gd.fintech.lms.vo.Lecture">
 		<result property="lectureNo" column="lecture_no"/>
 		<result property="lectureName" column="lecture_name"/>
 	</collection>
 	</resultMap>
  	
  	<!-- 질문 자세히 보기 -->
  	<select id="selectQuestionOne" resultMap="selectQuestionOne" parameterType="int">
  		SELECT
  			q.question_no, 
	  		q.lecture_no,
	  		l.lecture_name,
	  		q.account_id,
	  		q.question_writer,
	  		q.question_title,
	  		q.question_content,
	  		DATE_FORMAT(q.question_createdate,'%Y-%m-%d (%H:%i)') question_createdate,
	  		DATE_FORMAT(q.question_updatedate,'%Y-%m-%d (%H:%i)') question_updatedate,
	  		q.question_password,
	  		qf.question_file_original,
	  		qf.question_file_count,
	  		qf.question_file_createdate,
	  		qf.question_file_uuid
	  	FROM question q left join question_file qf
	  		on q.question_no = qf.question_no
	  		left join lecture l
	  		on q.lecture_no = l.lecture_no
	  	WHERE q.question_no = #{questionNo}
  	</select>
  	
  	<select id="selectCommentList" resultType="gd.fintech.lms.vo.QuestionComment" parameterType="java.util.Map">
  		SELECT
  			account_id accountId,
  			question_comment_writer questionCommentWriter,
	  		question_comment_content questionCommentContent,
	  		DATE_FORMAT(question_comment_createdate,'%Y-%m-%d (%H:%i)') questionCommentCreatedate,
	  		question_comment_updatedate questionCommentUpdatedate
  		FROM question_comment
  		WHERE question_no = #{questionNo}
  		LIMIT #{beginRow},#{rowPerPage}
  	</select>
  	
  	<!-- 질문 등록 -->
  	<insert id="insertQuestion" parameterType="gd.fintech.lms.vo.Question">
  		<selectKey resultType="int" keyProperty="questionNo" order="AFTER">
  			SELECT LAST_INSERT_ID()
  		</selectKey>
  		INSERT INTO 
  			question(
	  			lecture_no,
	  			account_id,
	  			question_writer,
	  			question_title,
	  			question_content,
	  			question_createdate,
	  			question_updatedate,
	  			question_password
  			)VALUES(
  				#{lectureNo},
  				#{accountId},
  				#{questionWriter},
  				#{questionTitle},
  				#{questionContent},
  				Now(),
  				Now(),
  				#{questionPassword}
  			)
  	</insert>
  	
  	<!-- 질문 삭제 -->
	<delete id="deleteQuestion" parameterType="int">
		DELETE 
		FROM question
		WHERE question_no = #{questionNo}
	</delete>
	  	 	
  	<!-- 강의 번호 리스트를 가져옵니다(강의번호에 맞는 질문을 등록하기 위해) -->
  	<select id="selectLectureList" resultType="gd.fintech.lms.vo.Lecture">
  		SELECT 
  			l.lecture_no lectureNo,
  			l.lecture_name lectureName
  		FROM lecture l left join class_registration cr
	  		 on l.lecture_no = cr.lecture_no
	  	WHERE cr.account_id = #{accountId} and cr.class_registration_state='수강중' 	 
  	</select>
  	
  	<!-- 질문에 대한 댓글 모두 삭제 -->
  	<delete id="deleteQuestionAllComment" parameterType="int">
  		DELETE
  		FROM question_comment
  		WHERE question_no = #{questionNo}
  	</delete>
  	
  	<update id="updateQuestionCount" parameterType="int">
  		UPDATE question
  		SET question_count = question_count+1
  		WHERE question_no = #{questionNo}
  	</update>
  	
  	<!-- 질문 수정 -->
  	<update id="updateQuestion" parameterType="gd.fintech.lms.vo.Question">
  		UPDATE question
  		SET
  			lecture_no = #{lectureNo},
	  		question_title = #{questionTitle},
	 		question_content = #{questionContent},
	  		question_updatedate = NOW(),
	 		question_password = #{questionPassword}
  		WHERE question_no = #{questionNo}
  	</update>
  	
  	<!-- 강좌 번호에 대한 questionNo를 반환하는 쿼리 -->
  	<select id="selectLectureNo" parameterType="int" resultType="int">
  		SELECT 
  			question_no
  		FROM question
  		WHERE lecture_no = #{lectureNo}
  	</select>
  	
  	<select id="selectStudentName" resultType="gd.fintech.lms.vo.Student" parameterType="String">
  		SELECT
  			student_name StudentName
  		FROM student
  		WHERE student_id = #{accountId}
  	</select>
  </mapper>
  
  