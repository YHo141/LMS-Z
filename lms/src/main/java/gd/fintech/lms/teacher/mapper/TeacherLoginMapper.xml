<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="gd.fintech.lms.teacher.mapper.TeacherLoginMapper">
	<!-- 해당 아이디의 pw를 랜덤한 13글자로 변경 -->
	<update id="updateAccountToPw" parameterType="java.util.Map">
		UPDATE account
		SET account_pw = PASSWORD(#{accountPw})
		WHERE account_id = #{accountId}
	</update>
	
	<!-- 이름과 이메일을 이용해서 해당 정보 찾기 -->
	<select id="selectTeacherToNameAndEmailByCheck" parameterType="gd.fintech.lms.vo.Teacher" resultType="int">
		SELECT COUNT(*)
		FROM teacher
		WHERE teacher_name = #{teacherName} and teacher_email = #{teacherEmail}
	</select>

	<!-- 이름과 이메일을 이용해서 해당 정보 찾기 -->
	<select id="selectTeacherToNameAndEmail" parameterType="gd.fintech.lms.vo.Teacher" resultType="gd.fintech.lms.vo.Teacher">
		SELECT t.teacher_id teacherId, t.teacher_name teacherName, t.teacher_email teacherEmail
		FROM teacher t INNER JOIN account a
		ON a.account_id = t.teacher_id
		WHERE t.teacher_name = #{teacherName} and t.teacher_email = #{teacherEmail}
	</select>
	
	<!-- 중복 로그인 방지 -->
	<select id="selectConnectByOverlapLogin" parameterType="gd.fintech.lms.vo.Connect" resultType="int">
		SELECT COUNT(*)
		FROM connect
		WHERE account_id = #{accountId} and connect_state = #{connectState}
	</select>

	<!-- 로그인 시 이미지 정보 가져오기 -->
	<select id="selectTeacherImage" parameterType="String" resultType="String">
		SELECT teacher_image
		FROM teacher
		WHERE teacher_id = #{teacherId}
	</select>

	<!-- 회원가입 시 account테이블에 추가 -->
	<insert id="insertAccountToSignup" parameterType="gd.fintech.lms.vo.TeacherForm">
		INSERT INTO account(account_id, account_pw,
							account_state, account_level,
							account_createdate, account_updatedate)
		VALUES(#{teacherId}, PASSWORD(#{teacherPw}),
			   #{accountState}, #{accountLevel},
			   NOW(), NOW())
	</insert>
	
	<!-- 회원가입 시 teacher_queue테이블에 추가 -->
	<insert id="insertTeacherQueueToSignup" parameterType="gd.fintech.lms.vo.TeacherForm">
		INSERT INTO teacher_queue(teacher_id, teacher_email,
								  teacher_phone, teacher_name,
								  teacher_gender, teacher_birth,
								  teacher_address_main, teacher_address_sub)
		VALUES(#{teacherId}, #{teacherEmail},
			   #{teacherPhone}, #{teacherName},
			   #{teacherGender}, #{teacherBirth},
			   #{teacherAddressMain}, #{teacherAddressSub})
	</insert>
	
	<!-- 도로명을 입력 하였을 경우 주소 리스트 출력 -->
	<select id="selectAddressToSearch" parameterType="java.util.Map" resultType="gd.fintech.lms.vo.Address">
		SELECT
			sido,
			sigungu,
			doro,
			buildno1,
			buildno2,
			id
		FROM address
		WHERE doro like CONCAT(#{doro}, '%')
		ORDER BY doro, buildno1, buildno2
		<!-- LIMIT #{currentPage}, #{limitPage}-->
	</select>
	
	<!-- 아이디 중복검사 -->
	<select id="selectAccountToSignupByOverlapId" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM account
		WHERE account_id = #{accountId}
	</select>
	
	<!-- 이메일 중복검사 -->
	<select id="selectTeacherToSignupByOverLapEmail" parameterType="String" resultType="int">
		SELECT COUNT(*)
		FROM teacher_queue
		WHERE teacher_email = #{teacherEmail}
	</select>
	
	<!-- 로그인 액션 -->
	<select id="selectAccountToTeacherLogin" parameterType="gd.fintech.lms.vo.Account" resultType="String">
		SELECT account_id accountId
		FROM account
		WHERE
			account_id = #{accountId} and 
			account_pw = PASSWORD(#{accountPw}) and
			account_state = #{accountState} and
			account_level = #{accountLevel} 
	</select>
	
	<!-- 휴면상태일 경우 휴면해제 인증 폼으로 이동하기 위한 조건 -->
	<select id="selectAccountStateCk" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT 
			account_state accountState
		FROM `account`
		WHERE account_id=#{accountId}
	</select>
	<!-- 인증메일을 보낼 강사 메일 가져오기 -->
	<select id="selectTeacherEmail" parameterType="java.lang.String" resultType="java.lang.String">
		SELECT
			teacher_email teacherEmail
		FROM teacher
		WHERE teacher_id=#{teacherId}
	</select>
	<!-- 휴면계정 인증 성공시 업데이트 -->
	<update id="updateChangeActivity" parameterType="java.lang.String">
		UPDATE `account`
		SET account_state ='활성화'
		WHERE account_id=#{teacherId}
	</update>
</mapper>